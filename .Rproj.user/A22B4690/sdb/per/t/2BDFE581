{
    "contents" : "#===================Reproducible Research Course Project 2======================\n\n# This script contains the exploratory analysis for the course project\n#   The final product is contained in the Rmd file and published to RPubs\n\n#====================Assignment=================================================\n#The basic goal of this assignment is to explore the NOAA Storm Database and \n#   answer some basic questions about severe weather events. You must use the \n#   database to answer the questions below and show the code for your entire \n#   analysis. Your analysis can consist of tables, figures, or other summaries. \n#   You may use any R package you want to support your analysis.\n\n#=============================Questions=========================================\n#Your data analysis must address the following questions:\n    \n# 1. Across the United States, which types of events (as indicated in the EVTYPE\n#    variable) are most harmful with respect to population health?\n\n# 2. Across the United States, which types of events have the greatest economic \n#    consequences?\n\n#Consider writing your report as if it were to be read by a government or \n#    municipal manager who might be responsible for preparing for severe weather\n#    events and will need to prioritize resources for different types of events.\n#    However, there is no need to make any specific recommendations in your report.\n\n\n#============================Read in the Data===================================\n\n# Download the data\n\n    download.file(\"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2\", \"StormData.csv.bz2\")\n\n# Read the data into R\n\n    stormdata<-read.csv(\"StormData.csv.bz2\")\n\n#=========================Initial Exploratory Analysis==========================\n\n    dim(stormdata)\n    summary(stormdata)\n    head(stormdata)\n    tail(stormdata)\n\n    hist(stormdata$FATALITIES)\n    hist(stormdata$FATALITIES[stormdata$FATALITIES!=0])\n    summary(stormdata$FATALITIES[stormdata$FATALITIES!=0])\n    table(stormdata$FATALITIES)\n    table(stormdata$INJURIES)\n    table(stormdata$PROPDMG)\n    hist(stormdata$PROPDMG)\n    hist(stormdata$PROPDMG[stormdata$PROPDMG>0])\n\n    summary(stormdata$EVTYPE)\n    str(stormdata$EVTYPE)\n    table(stormdata$EVTYPE)\n    barplot(table(stormdata$EVTYPE))\n\n#==================================Question 1 ==================================\n\n# 1. Across the United States, which types of events (as indicated in the EVTYPE\n#    variable) are most harmful with respect to population health?\n    \n# Find the total, mean, and meadian number of fatalities for each type of event\n# Split the fatalities variable by event type\n    attach(stormdata)\n    by.event.type<-split(FATALITIES, EVTYPE)\n# Apply sum, mean, and median\n    total.fatalities.by.type<-sapply(by.event.type, sum)\n    mean.fatalities.by.type<-sapply(by.event.type, mean)\n    median.fatalities.by.type<-sapply(by.event.type, median)\n\n    rm(by.event.type)   #To conserve memory\n    detach(stormdata)\n\n# Look at the results in histograms\n# This was not useful, comment it out\n#    par(mfrow=c(3,1))\n#    hist(total.fatalities.by.type)\n#    hist(mean.fatalities.by.type)\n#    hist(median.fatalities.by.type)\n#    par(mfrow=c(1,1))\n\n# Look at the results in tables\n    table(total.fatalities.by.type)\n    table(mean.fatalities.by.type)\n    table(median.fatalities.by.type)\n\n    hist(mean.fatalities.by.type[mean.fatalities.by.type>0])\n\n# Extract the event types with the highest total number of fatalities, \n#    highest mean fatalities and highest median fatalities\n\n    names(total.fatalities.by.type)[total.fatalities.by.type==max(total.fatalities.by.type)]\n    names(mean.fatalities.by.type)[mean.fatalities.by.type==max(mean.fatalities.by.type)]\n    names(median.fatalities.by.type)[median.fatalities.by.type==max(median.fatalities.by.type)]\n\n# Look at the top five event types for fatalities in each summation category\n\n    head(names(total.fatalities.by.type[order(total.fatalities.by.type, decreasing=T)]), n=5)\n    head(names(mean.fatalities.by.type[order(mean.fatalities.by.type, decreasing=T)]), n=5)\n    head(names(median.fatalities.by.type[order(median.fatalities.by.type, decreasing=T)]), n=5)\n\n    mean.fatalities.by.type[\"TORNADO\"]\n\n# How many of various events that appear in the top five lists are included in the data?\n\n    event.type.table<-table(stormdata$EVTYPE)\n    event.type.table[\"TORNADO\"];event.type.table[\"EXCESSIVE HEAT\"]; event.type.table[\"FLASH FLOOD\"]; event.type.table[\"HEAT\"];event.type.table[\"LIGHTNING\"]\n\n    event.type.table[\"TORNADOES, TSTM WIND, HAIL\"];event.type.table[\"COLD AND SNOW\"];event.type.table[\"TROPICAL STORM GORDON\"];event.type.table[\"RECORD/EXCESSIVE HEAT\"];event.type.table[\"EXTREME HEAT\"]\n\n    event.type.table[\"HEAT WAVE DROUGHT\"];event.type.table[\"HIGH WIND/SEAS\"]\n\n# How many types of events are there that have the word \"heat\" in the name?\n\n    names(event.type.table)[grep(\"HEAT\", names(event.type.table), ignore.case=T)]\n    event.type.table[grep(\"HEAT\", names(event.type.table), ignore.case=T)]\n    sum(event.type.table[grep(\"HEAT\", names(event.type.table), ignore.case=T)])\n\n# How many events are there with the word \"tornado\" in the name?\n\n    names(event.type.table)[grep(\"TORNADO\", names(event.type.table), ignore.case=T)]\n    event.type.table[grep(\"TORNADO\", names(event.type.table), ignore.case=T)]\n    sum(event.type.table[grep(\"TORNADO\", names(event.type.table), ignore.case=T)])\n\n# Look for other patterns to look for\n    names(event.type.table)\n\n# How many events are there with the word \"wind\" in the name?\n\n    names(event.type.table)[grep(\"WIND\", names(event.type.table), ignore.case=T)]\n    event.type.table[grep(\"WIND\", names(event.type.table), ignore.case=T)]\n    sum(event.type.table[grep(\"WIND\", names(event.type.table), ignore.case=T)])\n\n# How many events are there with the word \"snow\" in the name?\n\n    names(event.type.table)[grep(\"snow\", names(event.type.table), ignore.case=T)]\n    event.type.table[grep(\"snow\", names(event.type.table), ignore.case=T)]\n    sum(event.type.table[grep(\"snow\", names(event.type.table), ignore.case=T)])\n\n# How many events are there with the word \"cold\" in the name?\n\n    names(event.type.table)[grep(\"cold\", names(event.type.table), ignore.case=T)]\n    event.type.table[grep(\"cold\", names(event.type.table), ignore.case=T)]\n    sum(event.type.table[grep(\"cold\", names(event.type.table), ignore.case=T)])\n\n# How many events are there with the word \"flood\" in the name?\n\n    names(event.type.table)[grep(\"flood\", names(event.type.table), ignore.case=T)]\n    event.type.table[grep(\"flood\", names(event.type.table), ignore.case=T)]\n    sum(event.type.table[grep(\"flood\", names(event.type.table), ignore.case=T)])\n\n# How many events are there with the word \"slide\" in the name?\n\n    names(event.type.table)[grep(\"slide\", names(event.type.table), ignore.case=T)]\n    event.type.table[grep(\"slide\", names(event.type.table), ignore.case=T)]\n    sum(event.type.table[grep(\"slide\", names(event.type.table), ignore.case=T)])\n\n\n# Find what I haven't classified yet\n    event.class<-character(length(event.type.table))\n\n    event.class[grep(\"WIND\", names(event.type.table), ignore.case=T)]<-\"wind\"\n        event.class[grep(\"wnd\", names(event.type.table), ignore.case=T)]<-\"wind\"\n        event.class[grep(\"w ind\", names(event.type.table), ignore.case=T)]<-\"wind\"\n    event.class[grep(\"snow\", names(event.type.table), ignore.case=T)]<-\"snow\"\n        event.class[grep(\"blizzard\", names(event.type.table), ignore.case=T)]<-\"snow\"\n        event.class[grep(\"winter\", names(event.type.table), ignore.case=T)]<-\"snow\"\n        event.class[grep(\"wintry\", names(event.type.table), ignore.case=T)]<-\"snow\"\n    event.class[grep(\"heat\", names(event.type.table), ignore.case=T)]<-\"heat\"\n        event.class[grep(\"hot\", names(event.type.table), ignore.case=T)]<-\"heat\"\n    event.class[grep(\"cold\", names(event.type.table), ignore.case=T)]<-\"cold\"\n    event.class[grep(\"tornado\", names(event.type.table), ignore.case=T)]<-\"tornado\"\n        event.class[grep(\"torndao\", names(event.type.table), ignore.case=T)]<-\"tornado\"\n    event.class[grep(\"flood\", names(event.type.table), ignore.case=T)]<-\"flood\"\n    event.class[grep(\"slide\", names(event.type.table), ignore.case=T)]<-\"slide\"\n    event.class[grep(\"freez\", names(event.type.table), ignore.case=T)]<-\"ice\"\n        event.class[grep(\"frost\", names(event.type.table), ignore.case=T)]<-\"ice\"\n        event.class[grep(\"ice\", names(event.type.table), ignore.case=T)]<-\"ice\"\n    event.class[grep(\"fire\", names(event.type.table), ignore.case=T)]<-\"fire\"\n    event.class[grep(\"volcan\", names(event.type.table), ignore.case=T)]<-\"volcano\"\n    event.class[grep(\"summary\", names(event.type.table), ignore.case=T)]<-\"summary\"\n    event.class[grep(\"lightning\", names(event.type.table), ignore.case=T)]<-\"lightning\"\n    event.class[grep(\"dry\", names(event.type.table), ignore.case=T)]<-\"dry\"\n        event.class[grep(\"drought\", names(event.type.table), ignore.case=T)]<-\"dry\"\n    event.class[grep(\"hail\", names(event.type.table), ignore.case=T)]<-\"hail\"\n    event.class[grep(\"rain\", names(event.type.table), ignore.case=T)]<-\"rain\"\n    event.class[grep(\"precipitation\", names(event.type.table), ignore.case=T)]<-\"rain\"\n    event.class[grep(\"storm\", names(event.type.table), ignore.case=T)]<-\"storm\"\n        event.class[grep(\"tropical\", names(event.type.table), ignore.case=T)]<-\"storm\"\n\n\n    length(which(event.class==\"\"))\n    names(event.type.table[which(event.class==\"\")])\n\n",
    "created" : 1421333935553.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3534453052",
    "id" : "2BDFE581",
    "lastKnownWriteTime" : 1421348445,
    "path" : "~/Coursera Courses/Reproducible Research/RRCourseProj2/Course Project 2 script.R",
    "project_path" : "Course Project 2 script.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}